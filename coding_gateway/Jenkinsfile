
def remote = [:]
remote.name = 'lct'
remote.allowAnyHosts = true
remote.host = '129.204.164.205'
remote.user = 'root'

dockerUser = "541053637@qq.com"
dockerPassword = "mylove2016!"

pipeline {
  agent any
  environment {
    ENTERPRISE = "xiaoguaishou"
    PROJECT = "coding_config"
    ARTIFACT = "coding_gateway"
    CODE_DEPOT = "coding_gateway"
    ARTIFACT_BASE = "${ENTERPRISE}-docker.pkg.coding.net"
    ARTIFACT_IMAGE="${ARTIFACT_BASE}/${PROJECT}/${ARTIFACT}/${CODE_DEPOT}"
  }
  stages {
    stage('检出') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])
      }
    }
    stage('编译') {
      steps {
        //sh './mvnw package -Dmaven.test.skip=true'
        echo "构建中..."
        sh 'java -version'
        sh 'mvn clean' // mvn 清除缓存
        sh 'mvn install' // 构建 Maven 工程
        echo "构建完成."
        archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true // 收集构建产物
      }
    }

    stage('打包镜像') {
      steps {
	    	sh "docker build -t ${ARTIFACT_IMAGE}:${env.GIT_BUILD_REF} ."
        sh "docker tag ${ARTIFACT_IMAGE}:${env.GIT_BUILD_REF} ${ARTIFACT_IMAGE}:latest"
      }
    }
    stage('推送到制品库') {
      steps {
        script {
              docker.withRegistry("https://${ARTIFACT_BASE}", "${env.DOCKER_REGISTRY_CREDENTIALS_ID}") {
                docker.image("${ARTIFACT_IMAGE}:${env.GIT_BUILD_REF}").push()
                docker.image("${ARTIFACT_IMAGE}:latest").push()
              }
        }
      }
    }
  }
}

node {
    checkout([
        $class: 'GitSCM',
        branches: [[name: env.GIT_BUILD_REF]],
        userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]
    ])
    stage('部署') {
        echo '开始部署……'
        // 检测分支，只部署 master
        if(GIT_LOCAL_BRANCH != 'master') {
            echo 'do noting.'
            return
        }
	    	echo '开始'
        imageName = "xiaoguaishou-docker.pkg.coding.net/coding_config/coding_gateway/coding_gateway:latest"
        docker.build(imageName)
        // 推送 Docker 镜像到仓库（CODING 制品库）
        docker.withRegistry("https://xiaoguaishou-docker.pkg.coding.net/coding_config/coding_gateway/coding_gateway", CODING_ARTIFACTS_CREDENTIALS_ID) {
            docker.image(imageName).push()
         }
        echo '获取内置的制品库凭证'
        // 获取内置的制品库凭证
        withCredentials([usernamePassword(credentialsId: env.CODING_ARTIFACTS_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
            dockerUser = DOCKER_USER
            dockerPassword = DOCKER_PASSWORD
        }
		echo "连接到远端服务器"
        withCredentials([usernamePassword(credentialsId: 'b2c70fa0-7fb3-44ad-b435-9857e7c37257', passwordVariable: 'password', usernameVariable: 'userName')]) {
            remote.user = userName
            remote.password = password
            // SSH 连接到远端服务器，拉取 Docker 镜
            sshCommand remote: remote, command: "docker login -u 541053637@qq.com -p mylove2016! xiaoguaishou-docker.pkg.coding.net"
            sshCommand remote: remote, command: "docker stop coding_gateway | true"
            sshCommand remote: remote, command: "docker rm -f coding_gateway | true"
			sshCommand remote: remote, command: "docker rmi ${imageName} | true"
			sshCommand remote: remote, command: "docker pull ${imageName}"
            sshCommand remote: remote, command: "docker run --name coding_gateway --net=host -d ${imageName} "
        }
    }
 }
